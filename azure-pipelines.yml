# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: 'Build'
#- task: SonarCloudPrepare@1
#  inputs:
#    SonarCloud: 'sonarcloud'
#    organization: 'julioazocar-1'
#    projectKey: 'project-microservicio-spring'
#    projectName: 'project-microservicio-spring'
#  displayName: 'SonarCloud prepare'
- task: SonarCloudPrepare@1
  displayName: Preparing sonar cloud project 
  inputs:
         SonarCloud: 'sonarcloud'
         organization: 'julioazocar-1'
         scannerMode: 'Other'
         extraProperties: |
           # Additional properties that will be passed to the scanner,
           # Put one key=value per line, example:
           # sonar.exclusions=**/*.bin
           sonar.projectKey=project-microservicio-spring
           sonar.projectName=project-microservicio-spring
#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    tasks: 'sonar'
#    publishJUnitResults: false
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: true
#    sqGradlePluginVersionChoice: 'specify'
#    sonarQubeGradlePluginVersion: '3.5.0.2730'
#    spotBugsAnalysis: false

- task: SonarCloudPublish@1
  displayName: publish analisys
  inputs:
      pollingTimeoutSec: '300'

#- script: |
 #   echo 'Ruta del archivo JAR:'
  #  echo '$(System.DefaultWorkingDirectory)/build/libs/microservicio-spring-1.0.0.jar'
  #displayName: 'Imprimir Ruta del Archivo JAR'
- task: Docker@2
  inputs:
    containerRegistry: 'Docker'
    command: 'login'
- task: Docker@2
  inputs:
    containerRegistry: 'Docker'
    repository: 'julinf/microservicio-spring'
    command: 'build'
    Dockerfile: '**/Dockerfile'
- task: Docker@2
  inputs:
    containerRegistry: 'Docker'
    repository: 'julinf/microservicio-spring'
    command: 'push'
- script: |
        echo Hola Mundo
  displayName: 'Hola Mundo'